Outline copied in from notes. 

Will rewrite soon.

Three separate ideaa here.

    - Ideas
        - The future of JavaScript, the browser, and you
        - Uncertainty in JavaScript
        - What JavaScript Can Teach You
            - It was written in a very short time
            - It misbehaves
            - It is easy to make the argument that other languages are better
            - Because browser
            - JavaApplets & plugins
            - JavaScript is locked in more than Microsoft, but maybe it too can lose control?
            - Asm.js
            - WebAssembly
            - Computing moves to phones, to cloud, to browser
            - Graphics and processing always catch up
            - Certain things faster now due to GPU
            - Browser has JS locked in, and mind share
            - Node.js mindshare example
            - What is future? Engineering, anthropology, economics, behavioral economocs, and timing!
        - Idea 2:
            - Titles:
                   - Sharing across a new axis in oil and gas
                   - Standing on the shoulders of Giants* {*cross out giants} that guy in the UK office; 
                   - Intra-source; the cheap and easy path to innovation
            - Causes
                - Giants aren't dead, as things move too fast in CS. We can use each other's work.
                - this model works in open-source
                    - Security
                    - Innovation
                    - Mind share
                    - Eyeballs
                - New model of who does coding with rise of analytics. 
                    - There will be a point in time when it won't be IT contractors writing the majority of a company's code.
                - More people know how to write code the % is only increasing
                - Need to Raise profile of applied code geared to your data and your issues
                    - Data centric company
            - What
                - Intra-source ~ internal code sharing ~ skill-based community around coding that crosses org boundaries
                - Parts
                    - Github/Gitlab or network of them linked across the enterprise
                    - Way to quick understand and answer questions about the code, people writing the code, and their purposes
                        - turn code repositories into a data product with many possible things that sit on top of it
                    - Community & Communication strategy for making connections, sharing information, and promotion.
                    - Possible to also share products not just code: API registries, Data visualization gallery
            - Benefits
                - Increase innovation rate
                - Cost savings & reduce cycle times
                - Know your organizations skills
                - Make contacts, find mentors, and share skills across large organizations
                - Easier to build on componets & helps break those darn silos or at least stop building them
                - Informal project oriented Learning
                - A half-way step to open-source
                    - Some of the benefits with fewer lawyers and more speed
            - Challenges
                - Innovation is Different model from 'best practice'.
                    - Best practice in code is less on methods and more about clarity, style, and success of end product. 
                        - The "how" strinks in importance.
                        - Guy at AAPG who stood up after a talk about data science and said, 
                            - "no one should believe any of it if it can't be broken down into a simple list of variables and an equation and explained to a manager."
                            - That guy is wrong. The whole point of data science is it is very complicated math that a human can't easily do by themselves. 
                            - We use 3D models. Data science & data visualizations are often more testable! 
                            - Oil and gas is only good at new things in categories where we've become accustomed to continuous and gradual change.
                                - In other categories, like source rock or anything with well logs, we're much more resistent. 
                - Incentives
                    - What do you incentivize?
                    - Incentives cause gaming
                    - Incentives vs.culture
                - Coding skills in data sphere cross organization but also reside in other disciplines , at margins, and completely inside.
                    - NLP, SciKit-Learn, tensor flow, d3.js all cross many domains
                    - Upstream vs downstream, region, explora-dev-production, disciplines
                - Needs to both use these skills and deal with issues of groups that have and don't have skills
                - Software, code running inside, separate, chains, etc. Changes more issue than model.
                - Organization model, how to distribute people with skills? How does this change over time as both technology and people's skills and organizational model change
        - Joy of side projects or the coders field trip
